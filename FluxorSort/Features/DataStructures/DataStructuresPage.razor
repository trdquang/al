@page "/data-structures"
@using FluxorSort.Features.DataStructures.Components
@using FluxorSort.Features.DataStructures.Store
@using FluxorSort.Features.DataStructures.Types
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<PageTitle>Cấu trúc dữ liệu</PageTitle>

<div class="container">
    <h1 class="my-4">Cấu trúc dữ liệu</h1>

    <div class="row">
        <div class="col-md-4">
            <div class="d-flex align-items-center mb-3">
                <h3 class="me-3 mb-0">Loại:</h3>
                <DataStructureSelector />
            </div>

            <DataStructureOperations />
        </div>

        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3>Trực quan hóa @DataStructuresState!.Value.CurrentType</h3>
                </div>
                <div class="card-body">
                    @switch (DataStructuresState!.Value.CurrentType)
                    {
                        case DataStructureType.Stack:
                            <StackVisualizer Elements="@DataStructuresState.Value.Elements"
                                             CurrentElement="@DataStructuresState.Value.CurrentElement"
                                             CurrentPosition="@DataStructuresState.Value.CurrentPosition" />
                            break;
                        case DataStructureType.Queue:
                            <QueueVisualizer Elements="@DataStructuresState.Value.Elements"
                                             CurrentElement="@DataStructuresState.Value.CurrentElement"
                                             CurrentPosition="@DataStructuresState.Value.CurrentPosition" />
                            break;
                        case DataStructureType.List:
                            <ListVisualizer Elements="@DataStructuresState.Value.Elements"
                                            CurrentElement="@DataStructuresState.Value.CurrentElement"
                                            CurrentPosition="@DataStructuresState.Value.CurrentPosition" />
                            break;
                    }
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-header">
                    <h3>Giải thích</h3>
                </div>
                <div class="card-body">
                    @switch (DataStructuresState!.Value.CurrentType)
                    {
                        case DataStructureType.Stack:
                            <div>
                                <h4>Stack (Ngăn xếp)</h4>
                                <p>Stack là một cấu trúc dữ liệu hoạt động theo nguyên tắc LIFO (Last In First Out) - vào sau ra trước.</p>
                                <ul>
                                    <li><strong>Push</strong>: Thêm một phần tử vào đỉnh của Stack.</li>
                                    <li><strong>Pop</strong>: Lấy và xóa phần tử ở đỉnh của Stack.</li>
                                    <li><strong>Peek</strong>: Xem phần tử ở đỉnh của Stack mà không xóa nó.</li>
                                </ul>
                                <p>Ứng dụng: Quản lý lời gọi hàm, đảo ngược chuỗi, kiểm tra dấu ngoặc, v.v.</p>
                            </div>
                            break;
                        case DataStructureType.Queue:
                            <div>
                                <h4>Queue (Hàng đợi)</h4>
                                <p>Queue là một cấu trúc dữ liệu hoạt động theo nguyên tắc FIFO (First In First Out) - vào trước ra trước.</p>
                                <ul>
                                    <li><strong>Enqueue</strong>: Thêm một phần tử vào cuối Queue.</li>
                                    <li><strong>Dequeue</strong>: Lấy và xóa phần tử ở đầu Queue.</li>
                                    <li><strong>Peek</strong>: Xem phần tử ở đầu Queue mà không xóa nó.</li>
                                </ul>
                                <p>Ứng dụng: Xử lý tác vụ, in ấn, CPU scheduling, v.v.</p>
                            </div>
                            break;
                        case DataStructureType.List:
                            <div>
                                <h4>List (Danh sách)</h4>
                                <p>List là một cấu trúc dữ liệu cho phép lưu trữ và truy cập các phần tử theo chỉ số.</p>
                                <ul>
                                    <li><strong>Add</strong>: Thêm một phần tử vào cuối List.</li>
                                    <li><strong>Insert</strong>: Chèn một phần tử vào vị trí chỉ định.</li>
                                    <li><strong>Remove</strong>: Xóa phần tử đầu tiên có giá trị chỉ định.</li>
                                    <li><strong>RemoveAt</strong>: Xóa phần tử tại vị trí chỉ định.</li>
                                    <li><strong>Clear</strong>: Xóa tất cả các phần tử trong List.</li>
                                </ul>
                                <p>Ứng dụng: Lưu trữ dữ liệu, quản lý danh sách, v.v.</p>
                            </div>
                            break;
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject]
    private IState<DataStructuresState>? DataStructuresState { get; set; }
}