@page "/duongdi"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Demo Thuật Toán Tìm Đường Đi</title>
    <script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        #graphContainer {
            height: 400px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-bottom: 20px;
        }

        .output {
            font-weight: bold;
            color: #0d6efd;
        }

        .result {
            font-weight: bold;
            color: #28a745;
        }
    </style>
</head>

<body>
    <div class="container mt-5">
        <h2 class="text-center mb-4">📈 Demo Tìm Đường Đi với Các Thuật Toán</h2>

        <div class="mb-3">
            <label class="form-label">📄 Nhập danh sách cạnh (ví dụ: 1 2 5):</label>
            <textarea class="form-control" id="edgeInput" rows="5" placeholder="1 2 5\n2 3 10\n1 3 15\n3 4 10"></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">🔄 Chọn thuật toán:</label>
            <select id="algorithmSelect" class="form-control">
                <option value="dijkstra">Dijkstra</option>
                <option value="bfs">BFS</option>
                <option value="dfs">DFS</option>
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">🔄 Chọn kiểu đồ thị:</label>
            <select id="graphTypeSelect" class="form-control">
                <option value="directed">Có hướng</option>
                <option value="undirected">Vô hướng</option>
            </select>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <input type="text" id="startNode" class="form-control" placeholder="Đỉnh bắt đầu (VD: 1)">
            </div>
            <div class="col-md-6">
                <button class="btn btn-primary w-100" onclick="buildAndRunAlgorithm()">Tạo đồ thị & Chạy Thuật Toán</button>
            </div>
        </div>

        <div id="graphContainer"></div>

        <div class="card">
            <div class="card-body">
                <h5>🔄 Kết quả tìm đường đi:</h5>
                <pre id="algorithmOutput" class="output">Chưa chạy.</pre>
            </div>
        </div>
    </div>

    <script>
        let network;
        let nodes = new vis.DataSet();
        let edges = new vis.DataSet();
        let graph = {};

        // Hàm phân tích các cạnh và tạo đồ thị
        function parseEdges(input) {
          const lines = input.trim().split('\n');
          graph = {};
          nodes.clear();
          edges.clear();

          const graphType = document.getElementById("graphTypeSelect").value; // Lấy kiểu đồ thị

          for (let line of lines) {
            const parts = line.trim().split(' ');
            if (parts.length < 3) continue;

            const [from, to, weight] = parts;
            const w = parseInt(weight);

            if (!graph[from]) graph[from] = [];
            if (!graph[to]) graph[to] = [];

            graph[from].push({ to, weight: w });

            // Thêm các cạnh vào đồ thị với mũi tên nếu là đồ thị có hướng, không có mũi tên nếu vô hướng
            if (graphType === "directed") {
              edges.update({ from, to, label: weight.toString() });
            } else {
              edges.update({ from, to, label: weight.toString(), arrows: { to: { enabled: false } } });
              edges.update({ from: to, to: from, label: weight.toString(), arrows: { to: { enabled: false } } });
            }

            nodes.update([{ id: from, label: from }, { id: to, label: to }]);
          }
        }

        // Hàm vẽ đồ thị
        function renderGraph() {
          const container = document.getElementById("graphContainer");
          const data = { nodes: nodes, edges: edges };
          const options = {
            nodes: {
              shape: 'dot',
              size: 20,
              color: '#0d6efd',
              font: {
                color: '#000',
                size: 16,
                bold: 'true'
              }
            },
            edges: {
              arrows: { to: { enabled: false } },
              color: '#999'
            },
            physics: {
              enabled: true,
              stabilization: { iterations: 200 }
            }
          };
          network = new vis.Network(container, data, options);
        }

        // Thuật toán Dijkstra
        function dijkstra(start) {
          const distances = {};
          const previous = {};
          const nodesQueue = Object.keys(graph);

          for (let node of nodesQueue) {
            distances[node] = Infinity;
            previous[node] = null;
          }
          distances[start] = 0;

          let steps = [];

          while (nodesQueue.length) {
            nodesQueue.sort((a, b) => distances[a] - distances[b]);
            const node = nodesQueue.shift();

            for (let neighbor of graph[node]) {
              const alt = distances[node] + neighbor.weight;
              if (alt < distances[neighbor.to]) {
                distances[neighbor.to] = alt;
                previous[neighbor.to] = node;
              }
            }

            steps.push(node);
          }

          return { distances, previous, steps };
        }

        // Thuật toán BFS
        function bfs(start) {
          let visited = {};
          let queue = [start];
          let path = { [start]: null };

          while (queue.length > 0) {
            const node = queue.shift();
            visited[node] = true;

            for (let neighbor of graph[node] || []) {
              if (!visited[neighbor.to]) {
                queue.push(neighbor.to);
                path[neighbor.to] = node;
              }
            }
          }

          return path;
        }

        // Thuật toán DFS
        function dfs(start) {
          let visited = {};
          let path = {};

          function dfsVisit(node) {
            visited[node] = true;
            for (let neighbor of graph[node] || []) {
              if (!visited[neighbor.to]) {
                path[neighbor.to] = node;
                dfsVisit(neighbor.to);
              }
            }
          }

          dfsVisit(start);
          return path;
        }

        // Hàm chạy thuật toán và cập nhật giao diện
        async function buildAndRunAlgorithm() {
          const edgeInput = document.getElementById("edgeInput").value;
          const start = document.getElementById("startNode").value.trim();

          if (start === "") {
            alert("Vui lòng nhập đỉnh bắt đầu.");
            return;
          }

          parseEdges(edgeInput);
          renderGraph();

          const algorithm = document.getElementById("algorithmSelect").value;
          let output = '';
          let steps = [];

          if (algorithm === "dijkstra") {
            const { distances, previous, steps: dijkstraSteps } = dijkstra(start);
            output += `Dijkstra:\n`;
            for (let node in distances) {
              output += `Khoảng cách từ ${start} đến ${node}: ${distances[node]}\n`;
            }
            steps = dijkstraSteps;
          } else if (algorithm === "bfs") {
            const path = bfs(start);
            output += `BFS:\n`;
            for (let node in path) {
              output += `Đường đi từ ${start} đến ${node}: ${getPath(path, start, node).join(' → ')}\n`;
            }
            steps = Object.keys(path);
          } else if (algorithm === "dfs") {
            const path = dfs(start);
            output += `DFS:\n`;
            for (let node in path) {
              output += `Đường đi từ ${start} đến ${node}: ${getPath(path, start, node).join(' → ')}\n`;
            }
            steps = Object.keys(path);
          }

          document.getElementById("algorithmOutput").textContent = output;

          // Di chuyển và làm nổi bật các đỉnh và cạnh trong từng bước
          for (let step of steps) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Dừng lại mỗi bước

            // Tô màu các đỉnh đang duyệt
            nodes.update([{ id: step, color: { background: '#ff5733' } }]);

            // Tô màu các cạnh đang được duyệt
            for (let neighbor of graph[step] || []) {
              edges.update([{ from: step, to: neighbor.to, color: { color: '#28a745' } }]);
            }

            network.redraw();
          }
        }

        // Hàm lấy đường đi từ đỉnh bắt đầu đến đỉnh đích
        function getPath(path, start, end) {
          let result = [];
          let current = end;
          while (current !== start && current !== undefined) {
            result.push(current);
            current = path[current];
          }
          result.push(start);
          return result.reverse();
        }
    </script>
</body>

</html>
