@page "/kruskal"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thuật Toán Kruskal - Cây Khung</title>
    <script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        #graphContainer {
            height: 400px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-bottom: 20px;
        }

        .output-box {
            font-family: monospace;
            white-space: pre-wrap;
            background: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            max-height: 300px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h2 class="text-center mb-4">📈 Mô Phỏng Thuật Toán Kruskal - Cây Khung</h2>

        <div class="mb-3">
            <label class="form-label">📄 Nhập danh sách cạnh (ví dụ: A B 4):</label>
            <textarea class="form-control" @bind="EdgeInput" rows="5">
A B 4
B C 2
A C 3
C D 5
B D 1
D E 7
C E 6</textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">🔄 Chọn loại cây khung:</label>
            <select @bind="MstType" class="form-control">
                <option value="min">Cây khung nhỏ nhất</option>
                <option value="max">Cây khung lớn nhất</option>
            </select>
        </div>

        <button class="btn btn-success w-100 mb-3" @onclick="RunKruskal">Chạy Thuật Toán</button>

        <div id="graphContainer"></div>

        <div class="card">
            <div class="card-body">
                <h5>🔄 Quá trình thuật toán:</h5>
                <pre id="algorithmOutput" class="output-box">@AlgorithmOutput</pre>
            </div>
        </div>
    </div>

    @code {
        private string EdgeInput { get; set; } = "A B 4\nB C 2\nA C 3\nC D 5\nB D 1\nD E 7\nC E 6";
        private string MstType { get; set; } = "min";
        private string AlgorithmOutput { get; set; } = "Chưa chạy.";

        private IJSObjectReference _module;

        private async Task RunKruskal()
        {
            await JSRuntime.InvokeVoidAsync("runKruskal", EdgeInput, MstType);
            AlgorithmOutput = "Đang chạy thuật toán...";
            StateHasChanged();
        }
    }

    <script>
        // JavaScript code for Kruskal's Algorithm
        window.runKruskal = async function(edgeInput, mstType) {
            const nodes = new vis.DataSet();
            const edges = new vis.DataSet();
            const allEdges = [];
            const nodeSet = new Set();

            const edgeList = edgeInput.trim().split('\n');

            // Parse edge list
            edgeList.forEach(line => {
                const [from, to, weight] = line.trim().split(' ');
                const weightInt = parseInt(weight);
                allEdges.push({ from, to, weight: weightInt });
                nodeSet.add(from);
                nodeSet.add(to);
            });

            // Add nodes
            nodeSet.forEach(id => nodes.add({ id, label: id }));

            // Union-Find structure
            const parent = {};
            const find = u => parent[u] !== u ? parent[u] = find(parent[u]) : u;
            const union = (u, v) => { parent[find(u)] = find(v); };
            nodeSet.forEach(n => parent[n] = n);

            // Sort edges based on the MST type
            allEdges.sort((a, b) => mstType === "min" ? a.weight - b.weight : b.weight - a.weight);

            // Create initial edges with gray color
            allEdges.forEach(e => {
                edges.add({
                    id: `${e.from}-${e.to}`,
                    from: e.from,
                    to: e.to,
                    label: e.weight.toString(),
                    color: { color: '#ccc' }
                });
            });

            // Setup the graph container
            const container = document.getElementById('graphContainer');
            const data = { nodes, edges };
            const options = {
                nodes: {
                    shape: 'dot',
                    size: 20,
                    color: '#0d6efd',
                    font: { color: '#000', size: 16 }
                },
                edges: {
                    arrows: 'none',
                    smooth: false
                },
                physics: false // Disable physics for static view
            };

            const network = new vis.Network(container, data, options);

            // Make sure the outputDiv element exists before accessing it
            const outputDiv = document.getElementById('algorithmOutput');
            if (!outputDiv) {
                console.error("outputDiv element not found!");
                return;
            }

            // Run Kruskal's algorithm
            for (let e of allEdges) {
                const id = `${e.from}-${e.to}`;
                outputDiv.textContent += `Xét cạnh ${e.from} - ${e.to} (trọng số ${e.weight})...\n`;

                // Update edge color to orange while processing
                edges.update({ id, color: { color: '#ffa500' }, width: 2 });
                network.setData({ nodes, edges });

                await new Promise(resolve => setTimeout(resolve, 1000));

                // Check if it forms a cycle
                if (find(e.from) !== find(e.to)) {
                    union(e.from, e.to);
                    outputDiv.textContent += `  => Chọn cạnh này vào cây khung\n`;
                    edges.update({ id, color: { color: '#28a745' }, width: 4 }); // Green for chosen edges
                } else {
                    outputDiv.textContent += `  => Bỏ qua vì tạo chu trình\n`;
                    edges.update({ id, color: { color: '#dc3545' }, dashes: true }); // Red for ignored edges
                }

                network.setData({ nodes, edges });
                await new Promise(resolve => setTimeout(resolve, 800));
            }

            const resultEdges = allEdges.filter(e => find(e.from) === find(e.to));
            outputDiv.textContent += `\nKết quả cây khung gồm các cạnh:\n`;
            resultEdges.forEach(e => {
                outputDiv.textContent += `${e.from} - ${e.to}: ${e.weight}\n`;
            });
        };
    </script>
</body>
</html>
